var allowedSports = ['volleyball', 'hockey', 'basketball', 'soccer'];

DropinFinder.controller('dropins', [
    '$scope',
    '$filter',
    '$location',
    '$timeout',
    '$routeParams',
    '$routeSegment',
    '$compile',
    'GeoCoder',
    'DropinsService',
    'DropinsDataModel',
    function ($scope, $filter, $location, $timeout, $routeParams, $routeSegment, $compile, GeoCoder, DropinsService, DropinsDataModel) {
        if (allowedSports.indexOf($routeParams.sport) < 0) {
            $location.path('/')
            return;
        }

        //Booleans
        $scope.failedRetrieve = false;
        $scope.loadedOnce = false;
        $scope.loadingDropins = false;
        $scope.mapMobileToggle = false;
        $scope.userLocationEnabled = true;
        $scope.admin_signed_in = false;//!!currentAdmin;
        $scope.isSelected = function (dropin_id) {
            $scope.markerWrappers.currentlyOpen === dropin_id;
        };
        var hasDropins = false;
        var hasLocation = false;

        var userMarker = {};

        $scope.sport = $routeParams.sport;
        $scope.currentPosition = {};

        // Main dropins array. This is what we ng-repeat on
        $scope.dropins = [];
        // Dictionary to hold all of the MarkerWrapper objects
        $scope.markerWrappers = { currentlyOpen: null};

        /**** FUNCTIONS: ****/
        // use a deferred promise from the Dropins service to populate the scope
        $scope.refreshDropins = refreshDropins;
        $scope.backToList = backToList;
        $scope.fetchDropin = fetchDropin;
        $scope.resizeMap = resizeMap;
        $scope.switchToMap = switchToMap;
        $scope.switchToList = switchToList;
        // Toggles to Dropin but leaves it open
        $scope.toggleTo = toggleTo;
        // Set the maps center to the dropin location
        $scope.centerDropin = centerDropin;
        // Sets the filter arguments in the URL
        $scope.setFilters = setFilters;
        // Resets the filter arguments in the URL
        $scope.resetFilters = resetFilters;
        $scope.resetSport = resetSport;
        // Sets the users location using GeoCoding API from the input box
        $scope.setCurrentLocation = setCurrentLocation;

        /**** DROPIN EVENTS/WATCHERS: ****/
        /*******************************************/
        // watch to see if the location changes and then set the sport accordingly
        // this is needed because the filters could change
        $scope.$on('$locationChangeSuccess', function (event) {
            var params = $location.search();
            if (params['day'] !== undefined || params['skill'] !== undefined) {
                $scope.refreshDropins();
            }

            ga('send', 'pageview', '/dropin-finder' + $location.path()); // add google analytics to the "router"
        });

        /** INIT **/
        $scope.refreshDropins();
        getUserLocation();

        /**** INNER CLASS: ****/
        /***********************/
        // definition of the marker object that is linked to each dropin event
        // properties:
        //  isOpen(bool)                        : indicates whether the marker object is open
        //  marker(Object)                      : the google maps marker objecct
        //  infoWindow(Object)                  : the google maps info window object
        //  infoWindow.toggle(function(bool))   : function to toggle an info window
        function MarkerWrapper(dropin) {
            this.isOpen = false;

            this.dropinId = dropin.id;

            this.marker = new google.maps.Marker({
                map: $scope.map,
                icon: getMapMarkerPath(dropin.sport_event.sport_id),
                position: new google.maps.LatLng(dropin.location.lat, dropin.location.long)
            });

            // the content for the infoWindow is set to blank to be generate at toggle-time
            this.infoWindow = new google.maps.InfoWindow({
                content: "",
                maxWidth: '195'
            });

            // redecleration needed to set up listener correctly
            var that = this;

            // listener to listen for click event on marker object
            google.maps.event.addListener(that.marker, 'click', function () {
                that.infoWindow.toggle();
            });

            // toggles the infoWindow
            // param: keepOpen - if this is passed in the info window will stay open
            this.infoWindow.toggle = function (keepOpen) {

                if (typeof (keepOpen) === 'undefined')
                    keepOpen = false;

                if (that.isOpen && !keepOpen) {
                    $scope.markerWrappers.currentlyOpen = null;
                    that.infoWindow.close();
                    that.isOpen = false;
                }
                else {
                    if ($scope.markerWrappers.currentlyOpen !== null) {
                        $scope.markerWrappers[$scope.markerWrappers.currentlyOpen].isOpen = false;
                        $scope.markerWrappers[$scope.markerWrappers.currentlyOpen].infoWindow.close();
                    }
                    var dropinsAtMarker = DropinsDataModel.GetDropinsForLocation(dropin.location.id);

                    $scope.markerWrappers.currentlyOpen = dropin.id;
                    that.infoWindow.content = generateInfoWindowHtmlContent(dropinsAtMarker);
                    that.infoWindow.open($scope.map, that.marker);
                    that.isOpen = true;

                    // switch on toggle
                    if($routeSegment.startsWith('dropin_finder.dropin_view')) {
                        var dropinURL = $routeSegment.getSegmentUrl('dropin_finder.dropin_view', {sport: $scope.sport, dropin_id: dropin.sport_event.id})

                        $location.path(dropinURL);

                        $scope.$broadcast('loadDropin', dropin.sport_event.id);
                    } else {
                        scrollToDropin(dropin);
                    }

                }

                if (!$scope.$$phase) {
                    $scope.$apply();
                }
            };
        }


        /** PRIVATE FUNCTIONS **/
        function getAndHandleFilters() {
            var currentFilterDictionary = {};

            // apply each filter if 'All' isn't selected
            if (typeof $location.search()['day'] !== 'undefined') {
                currentFilterDictionary['day'] = $location.search()['day'];
                $scope.weekdaySelect = $location.search()['day'];
            }
            else {
                $scope.weekdaySelect = undefined;
            }
            if (typeof $location.search()['skill'] !== 'undefined') {
                currentFilterDictionary['skill'] = $location.search()['skill'];
                $scope.skillLevelSelect = $location.search()['skill'];
            }
            else {
                $scope.skillLevelSelect = undefined
            }

            return currentFilterDictionary;
        };

        function reloadMarkerWrappers() {
            for (var property in $scope.markerWrappers) {
                if ($scope.markerWrappers.hasOwnProperty(property) && property !== "currentlyOpen") {
                    $scope.markerWrappers[property].marker.setMap(null);
                    $scope.markerWrappers[property] = null;
                    delete $scope.markerWrappers[property];
                }
            }
            $scope.markerWrappers.currentlyOpen = null;
            $scope.dropins.forEach(function (dropin) {
                $scope.markerWrappers[dropin.id] = new MarkerWrapper(dropin);
            });
        }

        function calculateDistanceForDropins() {
            if ($scope.hasLocation && $scope.hasDropins) {
                angular.forEach(vm.dropins, function (dropin) {
                    dropin.actualDistanceFromUser =
                            google.maps.geometry.spherical.computeDistanceBetween($scope.currentPosition.latLng,
                                    new google.maps.LatLng(dropin.location.lat, dropin.location.long));

                    dropin.distanceFromUser = (dropin.actualDistanceFromUser / 1000).toFixed(1).toString() + " km";
                });

                vm.dropins = orderBy(vm.dropins, ['actualDistanceFromUser', 'datetime_start'], false);
            }
        }

        //dynamically generates compiled html content for infowindows
        function generateInfoWindowHtmlContent(dropins) {
            var templateDropin = dropins[0];

            var bMultipleDropins = dropins.length > 1;
            var htmlContent = "<div class='info-window'>" +
                    "<h5>" + templateDropin.location.name + "</h5>" +
                    "<p><a href='http://maps.google.com/?q=" + templateDropin.location.address + "' target='map'>" + templateDropin.location.address + "</a></p>" +
                    "<p>" + templateDropin.phone + "</p>" +
                    "<table>"
            dropins.forEach(function (thisDropin) {
                htmlContent += "<tr ng-click='toggleTo(" + thisDropin.id + ")'" +
                "ng-class='{ &#39;marker-row-selected&#39; : "
                + thisDropin.id + " === " + $scope.markerWrappers.currentlyOpen + " && " + bMultipleDropins + "}'>" +
                "<td>" + $filter('date')(thisDropin.datetime_start, 'EEEE') + "</td>" +
                "<td>&nbsp;&nbsp;" + $filter('date')(thisDropin.datetime_start, 'h:mm a') + " - " + $filter('date')(thisDropin.datetime_end, 'h:mm a') + "</td>" +
                "<td ng-show='" + thisDropin.expired + "'>EXPIRED</td>" +
                "</tr>";
            });

            htmlContent += "</table>" + "<br><br>";

            htmlContent += "</div>";
            var compiled = $compile(htmlContent)($scope);
            return compiled[0];
        }

        function getUserLocation() {
            if (navigator.geolocation) {
                navigator.geolocation.getCurrentPosition(function (position) {
                    hasLocation = true;

                    $scope.currentPosition.latLng = new google.maps.LatLng(position.coords.latitude,
                            position.coords.longitude);

                    createOrSetUserMarker();

                    if(hasDropins){
                        DropinsDataModel.CalculateDistanceForDropins($scope.currentPosition.latLng);
                        $scope.dropins = $filter('orderBy')($scope.dropins, ['actualDistanceFromUser', 'datetime_start'], false)
                    }
                    $scope.$apply();

                }, function () {
                    //if you can't get the location, pan the map to middle of Vancouver
                    $scope.userLocationEnabled = false;
                    $timeout(function () {
                        $scope.map.panTo(new google.maps.LatLng(49.266491, -123.078252));
                    }, 2500);

                    //alert("Couldn't get your location, yo");
                    //handleNoGeolocation(true);
                });
            } else {
                // Browser doesn't support Geolocation
                $scope.map.setCenter(new google.maps.LatLng(49.266491, -123.078252));
                //handleNoGeolocation(false);
                //alert("Doesn't support geolocation");
            }
        }

        function createOrSetUserMarker(){
            if(userMarker.position){
                userMarker.setPosition($scope.currentPosition.latLng);
                $scope.map.panTo($scope.currentPosition.latLng);
            } else {
                userMarker = new google.maps.Marker({
                    map: $scope.map,
                    icon: "<%= asset_path("person-marker.png") %>",
                    position: $scope.currentPosition.latLng
                });
            }
        }

        // get the path for each map marker asset
        function getMapMarkerPath(sport) {
            switch (sport) {
                case "volleyball":
                    return "<%= asset_path("volleyball-marker.png") %>";
                case "hockey":
                    return "<%= asset_path("hockey-marker.png") %>";
                case "basketball":
                    return "<%= asset_path("basketball-marker.png") %>";
                case "soccer":
                    return "<%= asset_path("soccer-marker.png") %>";
                default :
                    return "";
            }

        }

        function scrollToDropin(dropin) {
            // scroll to logic here
            if ($('#dropin-' + dropin.id).length < 1) {
                return;
            }

            var scrollPos = $('#dropin-' + dropin.id).offset().top;

            var headerBuffer = 310;

            // resize the value in case we have a smaller screen
            if (window.innerWidth < 1200) {
                headerBuffer = 365
            }
            var docViewTop = $(window).scrollTop();
            var docViewBottom = docViewTop + $(window).height();
            var elemTop = $('#dropin-' + dropin.id).offset().top;
            var elemBottom = elemTop + $('#dropin-' + dropin.id).height();


            if (!((elemBottom <= docViewBottom) && (elemTop >= docViewTop))) {
                // if the element would fall into the height of the window
                // minus some buffer then just scroll to the top
                if ((scrollPos < window.innerHeight - 150 ) && window.innerWidth > 992) {
                    $('html,body').animate({scrollTop: 0}, 750);
                }
                // otherwise scroll to the element minus a buffer so it will always show on screen
                else {
                    $('html,body').animate({scrollTop: scrollPos - headerBuffer}, 750);
                }
            }
        }

        /** SCOPE FUNCTION BACKERS **/
        function backToList() {
            $timeout(function () {
                if ($scope.markerWrappers.currentlyOpen !== null) {
                    var currentlyOpen = $scope.markerWrappers.currentlyOpen;
                    $scope.markerWrappers[currentlyOpen].infoWindow.toggle();
                    $scope.markerWrappers[currentlyOpen].infoWindow.toggle();
                }
            }, 250);
        };

        function refreshDropins() {
            $scope.$emit("loadMap");
            $scope.loadingDropins = true;

            var filters = getAndHandleFilters();

            DropinsDataModel.RefreshDropins($scope.sport, filters).then(
                    function (dropins) {
                        $scope.loadingDropins = false;
                        $scope.loadedOnce = true;

                        hasDropins = true;

                        if(hasLocation){
                            DropinsDataModel.CalculateDistanceForDropins($scope.currentPosition.latLng);
                        }

                        $scope.dropins = DropinsDataModel.dropins;

                        reloadMarkerWrappers();

                        $scope.resizeMap();
                        $scope.$broadcast('dropinsUpdated');
                    },
                    function (reason) {
                        $scope.loadingDropins = false;
                        $scope.failedRetrieve = true;
                    });
        };

        function fetchDropin(sportEventId) {
            DropinsService.GetBySportEventId(sportEventId).then(
                    function (dropin) {
                        $scope.dropins.push(dropin)
                        calculateDistanceForDropins();
                        $scope.markerWrappers[dropin.id] = new MarkerWrapper(dropin);
                        $scope.$broadcast('dropinsUpdated');
                    },
                    function (reason) {
                        $scope.$broadcast('dropinFetchFailed', reason);
                    }
            )
        };

        function resizeMap() {
            // set a minor timeout to fix load issues
            $timeout(function () {
                google.maps.event.trigger($scope.map, 'resize');
            }, 350);
        };

        function switchToMap() {
            $scope.mapMobileToggle = !$scope.mapMobileToggle;
            $scope.resizeMap();
            $timeout(function () {
                if ($scope.markerWrappers.currentlyOpen !== null) {
                    var currentlyOpen = $scope.markerWrappers.currentlyOpen;
                    $scope.markerWrappers[currentlyOpen].infoWindow.toggle();
                    $scope.markerWrappers[currentlyOpen].infoWindow.toggle();
                }
            }, 500);
        };

        function switchToList() {
            $scope.mapMobileToggle = !$scope.mapMobileToggle;
            $timeout(function () {
                if ($scope.markerWrappers.currentlyOpen !== null) {
                    var currentlyOpen = $scope.markerWrappers.currentlyOpen;
                    $scope.markerWrappers[currentlyOpen].infoWindow.toggle();
                    $scope.markerWrappers[currentlyOpen].infoWindow.toggle();
                }
            }, 250);
        };

        function toggleTo(dropinId) {
            //keep InfoWindow Open, just switch dropins and scroll to it
            if ($scope.markerWrappers.currentlyOpen !== null) {
                if ($(window).width() <= 992) {
                    $scope.mapMobileToggle = false;
                    $timeout(function () {
                        $scope.markerWrappers[$scope.markerWrappers.currentlyOpen].infoWindow.toggle();
                        $scope.markerWrappers[dropinId].infoWindow.toggle();
                    }, 250)
                }
                else {
                    $scope.markerWrappers[$scope.markerWrappers.currentlyOpen].infoWindow.toggle();
                    $scope.markerWrappers[dropinId].infoWindow.toggle();
                }
            }
        };

        function centerDropin(dropin) {
            $scope.map.panTo(new google.maps.LatLng(dropin.location.lat, dropin.location.long));
            $scope.map.setZoom(11);
        };

        function setFilters() {
            if (this.weekdaySelect !== 'All') {
                $location.search('day', this.weekdaySelect);
            }
            else if (this.weekdaySelect === 'All') {
                $location.search('day', null);
                $scope.refreshDropins();
            }

            if (this.skillLevelSelect !== 'All') {
                $location.search('skill', this.skillLevelSelect);
            }
            else if (this.skillLevelSelect === 'All') {
                $location.search('skill', null);
                $scope.refreshDropins();
            }
        };

        function resetFilters() {
            $scope.weekdaySelect = undefined;
            $scope.skillLevelSelect = undefined;
            $location.search('day', null);
            $location.search('skill', null);
            $scope.refreshDropins();
        };

        function resetSport() {
            $location.path('/');
            $scope.sport = 'no-sport';
        };

        function setCurrentLocation(){
            if($scope.currentPosition.addressFilter && $scope.currentPosition.addressFilter !== ""){
                GeoCoder.geocode({address: $scope.currentPosition.addressFilter}).then(function (results) {
                    // attempt to reorder results to put closest first
                    if($scope.currentPosition.latLng){
                        angular.forEach(results, function(result){
                            result.distanceFromCurrent = google.maps.geometry.spherical.computeDistanceBetween($scope.currentPosition.latLng,
                                    new google.maps.LatLng(result.geometry.location.k, result.geometry.location.D));
                        });

                        results = $filter('orderBy')(results, 'distanceFromCurrent', false)
                    }

                    $scope.currentPosition.addressFilter = results[0].formatted_address;
                    $scope.currentPosition.latLng = new google.maps.LatLng(results[0].geometry.location.k, results[0].geometry.location.D);
                    DropinsDataModel.CalculateDistanceForDropins($scope.currentPosition.latLng);

                    createOrSetUserMarker();

                    $scope.dropins = $filter('orderBy')($scope.dropins, ['actualDistanceFromUser', 'datetime_start'], false);
                });
            }else{
                getUserLocation();
            }
        }
    }]);

